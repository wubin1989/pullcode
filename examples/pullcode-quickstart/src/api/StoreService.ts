/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by pullcode v1.2.1.
 * Don't edit!
 *
 * @module Store
 */
import { CreateAxiosOptions } from "pullcode/dist/esm/httputil/axiosTransform";
import BizService from "./BizService";
import type { Order } from "./types";

export class StoreService extends BizService {
  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
   * GET /store/inventory
   *
   * Returns pet inventories by status.
   * Returns a map of status codes to quantities.
   * @returns Promise<any> successful operation
   */
  getStoreInventory(): Promise<any> {
    return this.getAxios().get(`/store/inventory`, {});
  }

  /**
   * POST /store/order
   *
   * Place an order for a pet.
   * Place a new order in the store.
   * @param payload
   * @returns Promise<Order> successful operation
   */
  postStoreOrder(payload: Order): Promise<Order> {
    return this.getAxios().post(`/store/order`, payload, {});
  }

  /**
   * GET /store/order/${params.orderId}
   *
   * Find purchase order by ID.
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   * @param orderId ID of order that needs to be fetched
   * @returns Promise<Order> successful operation
   */
  getStoreOrderParamsOrderId(params: { orderId: number }): Promise<Order> {
    return this.getAxios().get(`/store/order/${params.orderId}`, {});
  }

  /**
   * DELETE /store/order/${params.orderId}
   *
   * Delete purchase order by identifier.
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   * @param orderId ID of the order that needs to be deleted
   * @returns Promise<any>
   */
  deleteStoreOrderParamsOrderId(params: { orderId: number }): Promise<any> {
    return this.getAxios().delete(`/store/order/${params.orderId}`, {});
  }
}

export default StoreService;

export function createStoreService(opt?: Partial<CreateAxiosOptions>) {
  return new StoreService(opt);
}

export const storeService = createStoreService();
