/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by pullcode v1.2.1.
 * Don't edit!
 *
 * @module Pet
 */
import { CreateAxiosOptions } from "pullcode/dist/esm/httputil/axiosTransform";
import * as qs from "qs";
import BizService from "./BizService";
import type { ApiResponse, Pet } from "./types";

export class PetService extends BizService {
  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
   * POST /pet
   *
   * Add a new pet to the store.
   * Add a new pet to the store.
   * @param payload Create a new pet in the store
   * @returns Promise<Pet> Successful operation
   */
  postPet(payload: Pet): Promise<Pet> {
    return this.getAxios().post(`/pet`, payload, {});
  }

  /**
   * PUT /pet
   *
   * Update an existing pet.
   * Update an existing pet by Id.
   * @param payload Update an existent pet in the store
   * @returns Promise<Pet> Successful operation
   */
  putPet(payload: Pet): Promise<Pet> {
    return this.getAxios().put(`/pet`, payload, {});
  }

  /**
   * GET /pet/findByStatus
   *
   * Finds Pets by status.
   * Multiple status values can be provided with comma separated strings.
   * @param status Status values that need to be considered for filter
   * @returns Promise<Pet[]> successful operation
   */
  getPetFindByStatus(params: {
    status: "available" | "pending" | "sold";
  }): Promise<Pet[]> {
    return this.getAxios().get(`/pet/findByStatus`, {
      params: {
        status: params.status,
      },
      paramsSerializer: (params) => qs.stringify(params),
    });
  }

  /**
   * GET /pet/findByTags
   *
   * Finds Pets by tags.
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @param tags Tags to filter by
   * @returns Promise<Pet[]> successful operation
   */
  getPetFindByTags(params: { tags: string[] }): Promise<Pet[]> {
    return this.getAxios().get(`/pet/findByTags`, {
      params: {
        tags: params.tags,
      },
      paramsSerializer: (params) => qs.stringify(params),
    });
  }

  /**
   * GET /pet/${params.petId}
   *
   * Find pet by ID.
   * Returns a single pet.
   * @param petId ID of pet to return
   * @returns Promise<Pet> successful operation
   */
  getPetParamsPetId(params: { petId: number }): Promise<Pet> {
    return this.getAxios().get(`/pet/${params.petId}`, {});
  }

  /**
   * POST /pet/${params.petId}
   *
   * Updates a pet in the store with form data.
   * Updates a pet resource based on the form data.
   * @param petId ID of pet that needs to be updated
   * @param name Name of pet that needs to be updated
   * @param status Status of pet that needs to be updated
   * @returns Promise<Pet> successful operation
   */
  postPetParamsPetId(params: {
    petId: number;
    name?: string;
    status?: string;
  }): Promise<Pet> {
    return this.getAxios().post(`/pet/${params.petId}`, null, {
      params: {
        name: params.name,
        status: params.status,
      },
      paramsSerializer: (params) => qs.stringify(params),
    });
  }

  /**
   * DELETE /pet/${params.petId}
   *
   * Deletes a pet.
   * Delete a pet.
   * @param api_key
   * @param petId Pet id to delete
   * @returns Promise<any>
   */
  deletePetParamsPetId(params: {
    api_key?: string;
    petId: number;
  }): Promise<any> {
    const headers: Record<string, string> = {};
    if (params.api_key !== undefined) {
      headers["api_key"] = "" + params.api_key;
    }
    return this.getAxios().delete(`/pet/${params.petId}`, {
      headers,
    });
  }

  /**
   * POST /pet/${params.petId}/uploadImage
   *
   * Uploads an image.
   * Upload image of the pet.
   * @param formData
   * @param petId ID of pet to update
   * @param additionalMetadata Additional Metadata
   * @returns Promise<ApiResponse> successful operation
   */
  postPetParamsPetIdUploadImage(
    formData: FormData,
    params: {
      petId: number;
      additionalMetadata?: string;
    }
  ): Promise<ApiResponse> {
    return this.getAxios().post(`/pet/${params.petId}/uploadImage`, formData, {
      params: {
        additionalMetadata: params.additionalMetadata,
      },
      paramsSerializer: (params) => qs.stringify(params),
    });
  }
}

export default PetService;

export function createPetService(opt?: Partial<CreateAxiosOptions>) {
  return new PetService(opt);
}

export const petService = createPetService();
