/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by pullcode v1.2.1.
 * Don't edit!
 *
 * @module User
 */
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import qs from "qs";
import BizService from "./BizService";
import type { User } from "./types";

export class UserService extends BizService {
  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
   * POST /user
   *
   * Create user
   * This can only be done by the logged in user.
   * @param payload Created user object
   * @returns Promise<any>
   */
  postUser(payload: User): Promise<any> {
    return this.getAxios().post(`/user`, payload, {});
  }

  /**
   * POST /user/createWithList
   *
   * Creates list of users with given input array
   * Creates list of users with given input array
   * @param payload
   * @returns Promise<User> Successful operation
   */
  postUserCreateWithList(payload: User[]): Promise<User> {
    return this.getAxios().post(`/user/createWithList`, payload, {});
  }

  /**
   * GET /user/login
   *
   * Logs user into the system
   * @param username The user name for login
   * @param password The password for login in clear text
   * @returns Promise<string> successful operation
   */
  getUserLogin(params: {
    username?: string;
    password?: string;
  }): Promise<string> {
    return this.getAxios().get(`/user/login`, {
      params: {
        username: params.username,
        password: params.password,
      },
      paramsSerializer: (params) => qs.stringify(params),
    });
  }

  /**
   * GET /user/logout
   *
   * Logs out current logged in user session
   * @returns Promise<any>
   */
  getUserLogout(): Promise<any> {
    return this.getAxios().get(`/user/logout`, {});
  }

  /**
   * GET /user/${params.username}
   *
   * Get user by user name
   * @param username The name that needs to be fetched. Use user1 for testing.
   * @returns Promise<User> successful operation
   */
  getUserParamsUsername(params: { username: string }): Promise<User> {
    return this.getAxios().get(`/user/${params.username}`, {});
  }

  /**
   * PUT /user/${params.username}
   *
   * Update user
   * This can only be done by the logged in user.
   * @param payload Update an existent user in the store
   * @param username name that need to be deleted
   * @returns Promise<any>
   */
  putUserParamsUsername(
    payload: User,
    params: {
      username: string;
    }
  ): Promise<any> {
    return this.getAxios().put(`/user/${params.username}`, payload, {});
  }

  /**
   * DELETE /user/${params.username}
   *
   * Delete user
   * This can only be done by the logged in user.
   * @param username The name that needs to be deleted
   * @returns Promise<any>
   */
  deleteUserParamsUsername(params: { username: string }): Promise<any> {
    return this.getAxios().delete(`/user/${params.username}`, {});
  }
}

export default UserService;

export function createUserService(opt?: Partial<CreateAxiosOptions>) {
  return new UserService(opt);
}

export const userService = createUserService();
