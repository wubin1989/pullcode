/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module User-controller
*/
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import BizService from "./BizService";
import type {
  UserModel,
  UserGroupModel,
  Response,
} from "./types"

export class UserService extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
  * POST /user/update
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserUpdate(
    payload: UserModel,
  ): Promise<Response> {
      return this.getAxios().post(`/user/update`,
          payload,
          {
          }
        )
  }

  /**
  * POST /user/unlock
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  postUserUnlock(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/user/unlock`,
          null,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * POST /user/reset
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  postUserReset(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/user/reset`,
          null,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * POST /user/lock
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  postUserLock(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/user/lock`,
          null,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * POST /user/group/update
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserGroupUpdate(
    payload: UserGroupModel,
  ): Promise<Response> {
      return this.getAxios().post(`/user/group/update`,
          payload,
          {
          }
        )
  }

  /**
  * POST /user/group/delete
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserGroupDelete(
    payload: string[],
  ): Promise<Response> {
      return this.getAxios().post(`/user/group/delete`,
          payload,
          {
          }
        )
  }

  /**
  * POST /user/group/auth
  *
  * @param roleIds 
  * @param userGroupIds 
  * @param tenantId 
  * @returns Promise<Response> OK
  */
  postUserGroupAuth(
    params: {
      roleIds: string[],
      userGroupIds: string[],
      tenantId: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/user/group/auth`,
          null,
          {
            params: {
              roleIds: params.roleIds,
              userGroupIds: params.userGroupIds,
              tenantId: params.tenantId,
            },
          }
        )
  }

  /**
  * POST /user/group/add
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserGroupAdd(
    payload: UserGroupModel,
  ): Promise<Response> {
      return this.getAxios().post(`/user/group/add`,
          payload,
          {
          }
        )
  }

  /**
  * POST /user/delete
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserDelete(
    payload: string[],
  ): Promise<Response> {
      return this.getAxios().post(`/user/delete`,
          payload,
          {
          }
        )
  }

  /**
  * POST /user/auth
  *
  * @param roleIds 
  * @param userIds 
  * @param tenantId 
  * @returns Promise<Response> OK
  */
  postUserAuth(
    params: {
      roleIds: string[],
      userIds: string[],
      tenantId: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/user/auth`,
          null,
          {
            params: {
              roleIds: params.roleIds,
              userIds: params.userIds,
              tenantId: params.tenantId,
            },
          }
        )
  }

  /**
  * POST /user/add
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postUserAdd(
    payload: UserModel,
  ): Promise<Response> {
      return this.getAxios().post(`/user/add`,
          payload,
          {
          }
        )
  }

  /**
  * GET /user/list/get
  *
  * @param pageSize 
  * @param pageNum 
  * @param name 
  * @returns Promise<Response> OK
  */
  getUserListGet(
    params: {
      pageSize?: number,
      pageNum?: number,
      name?: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/user/list/get`,
          {
            params: {
              pageSize: params.pageSize,
              pageNum: params.pageNum,
              name: params.name,
            },
          }
        )
  }

  /**
  * GET /user/group/list/get
  *
  * @param pageSize 
  * @param pageNum 
  * @param name 
  * @returns Promise<Response> OK
  */
  getUserGroupListGet(
    params: {
      pageSize?: number,
      pageNum?: number,
      name?: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/user/group/list/get`,
          {
            params: {
              pageSize: params.pageSize,
              pageNum: params.pageNum,
              name: params.name,
            },
          }
        )
  }

  /**
  * GET /user/group/get
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  getUserGroupGet(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/user/group/get`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * GET /user/get
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  getUserGet(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/user/get`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

}

export default UserService;
  
export function createUserService(opt?: Partial<CreateAxiosOptions>) {
  return new UserService(opt);
}

export const userService = createUserService();

