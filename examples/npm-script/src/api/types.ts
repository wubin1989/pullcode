/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module types
*/

export interface Response {
  code: string;
  message: string;
  data: any;
}

export interface NoticeTmplModel {
  id: string;
  name: string;
  configId: string;
  configName: string;
  noticeType: number;
  title: string;
  content: string;
  tenantId: string;
  tenantName: string;
  createName: string;
  createBy: string;
  createTime: string;
  updateTime: string;
  updateName: string;
  updateBy: string;
  status: number;
}

export interface NoticeConfigEmail {
  mailAccount: string;
  mailPassword: string;
  sendAccount: string;
  smtpServer: string;
  port: number;
  testTarget: string;
}

export interface NoticeConfigModel {
  id: string;
  name: string;
  configInfo: any;
  noticeType: number;
  tenantId: string;
  tenantName: string;
  createName: string;
  createBy: string;
  createTime: string;
  updateTime: string;
  updateName: string;
  updateBy: string;
  status: number;
}

export interface UserModel {
  id: string;
  name: string;
  accountId: string;
  password: string;
  phone: string;
  email: string;
  dingTalk: string;
  lark: string;
  weChat: string;
  roleIdList: string[];
  tenantId: string;
  tenantUser: boolean;
}

export interface UserGroupModel {
  id: string;
  name: string;
  description: string;
  tenantId: string;
  roleIdList: string[];
  userIdList: string[];
}

export interface TenantModel {
  id: string;
  name: string;
  user: UserModel;
}

export interface TargetPageCondition {
  /**
  * 目标分类ID
  */
  targetCategoryIds: string[];
  /**
  * 目标分组ID
  */
  targetGroupIds: string[];
  /**
  * ip地址
  */
  hosts: string[];
  /**
  * 资源名称
  */
  targetNames: string[];
  groupId: string;
}

export interface TargetPageRequestDTO {
  condition: TargetPageCondition;
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 第几页
  */
  page: number;
  /**
  * 排序条件字符串：排序字段前使用'-'(降序)和'+'(升序)号表示排序规则，多个排序字段用','隔开
  */
  sort: string;
}

export interface PageResultDTOTargetDTO {
  items: TargetDTO[];
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 当前页码
  */
  page: number;
  /**
  * 总行数
  */
  rowTotal: number;
  /**
  * 总页数
  */
  pageTotal: number;
}

export interface ResultVOPageResultDTOTargetDTO {
  code: number;
  msg: string;
  data: PageResultDTOTargetDTO;
}

export interface TargetDTO {
  /**
  * 表ID
  */
  id: string;
  /**
  * IP地址
  */
  host: string;
  /**
  * 监控状态
  */
  status: TargetDTOStatusEnum;
  /**
  * 监控指标
  */
  itemNum: number;
  /**
  * 告警数量
  */
  alertNum: number;
  /**
  * 资源名称
  */
  targetName: string;
  /**
  * 所属租户
  */
  tenantName: string;
  /**
  * 所属分组
  */
  targetGroupName: string;
  /**
  * 更新时间
  */
  updatedAt: string;
}

export enum TargetDTOStatusEnum {
  告警 = "告警",
  未监控 = "未监控",
  正常 = "正常",
}
export interface TargetCategoryDTO {
  /**
  * 表ID
  */
  id: string;
  /**
  * 优先级
  */
  priority: number;
  /**
  * 目标分类名称
  */
  name: string;
  /**
  * 父级目标分类ID
  */
  pid: string;
  /**
  * 是否有子节点
  */
  hasChild: boolean;
  /**
  * 文件夹图标类型
  */
  iconType: TargetCategoryDTOIconTypeEnum;
  groupId: string;
}

export enum TargetCategoryDTOIconTypeEnum {
  RED_HYPHEN = "RED_HYPHEN",
  YELLOW_HYPHEN = "YELLOW_HYPHEN",
  YELLOW = "YELLOW",
  LEAF_RED_HYPHEN = "LEAF_RED_HYPHEN",
  LEAF_YELLOW_HYPHEN = "LEAF_YELLOW_HYPHEN",
  LEAF_YELLOW = "LEAF_YELLOW",
}
export interface ResultVOTargetCategoryDTO {
  code: number;
  msg: string;
  data: TargetCategoryDTO;
}

export interface ResultVOString {
  code: number;
  msg: string;
  data: string;
}

export interface RoleModel {
  id: string;
  name: string;
  tenantId: string;
  childTenantIdList: string[];
  permissionIdList: string[];
  description: string;
  internal: boolean;
}

export interface PermissionModel {
  id: string;
  name: string;
  dataType: string;
  dataOperationPaths: string[];
  description: string;
  tenantId: string;
  ruleList: Rule[];
  internal: boolean;
}

export interface Rule {
  fieldName: string;
  operator: string;
  value: string;
  sortIndex: number;
}

export interface CmdbModelGroupDto {
  id?: string;
  groupName: string;
  description?: string;
}

export interface ItemTmplTargetPageCondition {
  /**
  * 指标模板ID，不传表示全部
  */
  itemTmplIds: string[];
  /**
  * IP地址
  */
  hosts: string[];
  /**
  * 目标资源名称
  */
  targetNames: string[];
}

export interface ItemTmplTargetPageRequestDTO {
  condition: ItemTmplTargetPageCondition;
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 第几页
  */
  page: number;
  /**
  * 排序条件字符串：排序字段前使用'-'(降序)和'+'(升序)号表示排序规则，多个排序字段用','隔开
  */
  sort: string;
}

export interface PageResultDTORelatedTargetDTO {
  items: RelatedTargetDTO[];
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 当前页码
  */
  page: number;
  /**
  * 总行数
  */
  rowTotal: number;
  /**
  * 总页数
  */
  pageTotal: number;
}

export interface RelatedTargetDTO {
  /**
  * 目标表ID
  */
  id: string;
  /**
  * IP地址
  */
  host: string;
  /**
  * 应用数量
  */
  itemNum: number;
  /**
  * 资源名称
  */
  targetName: string;
  /**
  * 所属分组
  */
  targetGroupName: string;
  /**
  * 基本信息-指标名称
  */
  itemTmplName: string;
  /**
  * 基本信息-类型
  */
  itemTmplType: string;
  /**
  * 基本信息-关联目标
  */
  targetNum: number;
  /**
  * 基本信息-储存命令
  */
  series: string;
  /**
  * 基本信息-采集命令
  */
  collectCmd: string;
}

export interface ResultVOPageResultDTORelatedTargetDTO {
  code: number;
  msg: string;
  data: PageResultDTORelatedTargetDTO;
}

export interface ItemTmplPageCondition {
  /**
  * 指标组ID
  */
  itemGroupIds: string[];
  /**
  * 名称
  */
  itemTmplNames: string[];
  /**
  * 指标类型ID
  */
  itemTypeIds: string[];
  /**
  * 所属租户ID
  */
  tenantIds: string[];
  /**
  * 创建者
  */
  createdBys: string[];
  /**
  * 存储Series
  */
  series: string[];
  /**
  * 采集命令
  */
  commands: string[];
}

export interface ItemTmplPageRequestDTO {
  condition: ItemTmplPageCondition;
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 第几页
  */
  page: number;
  /**
  * 排序条件字符串：排序字段前使用'-'(降序)和'+'(升序)号表示排序规则，多个排序字段用','隔开
  */
  sort: string;
}

export interface ItemTmplDTO {
  /**
  * 表ID
  */
  id: string;
  /**
  * 编码
  */
  code: number;
  /**
  * 名称
  */
  name: string;
  /**
  * 指标类型
  */
  itemType: string;
  /**
  * 所属租户
  */
  tenantName: string;
  /**
  * 所属分组
  */
  itemGroup: string;
  /**
  * 存储Series
  */
  series: string;
  /**
  * 采集命令
  */
  cmd: string;
  /**
  * 关联目标数
  */
  targetNum: number;
  /**
  * 创建者
  */
  createdBy: string;
}

export interface PageResultDTOItemTmplDTO {
  items: ItemTmplDTO[];
  /**
  * 每页多少条数据
  */
  size: number;
  /**
  * 当前页码
  */
  page: number;
  /**
  * 总行数
  */
  rowTotal: number;
  /**
  * 总页数
  */
  pageTotal: number;
}

export interface ResultVOPageResultDTOItemTmplDTO {
  code: number;
  msg: string;
  data: PageResultDTOItemTmplDTO;
}

export interface ItemTmplBulkReplaceRequestDTO {
  /**
  * 源指标模板ID
  */
  srcItemTplId: string;
  /**
  * 被替换指标模板ID
  */
  dstItemTplIds: string[];
  /**
  * 选择目标，支持正选反选
  */
  targetIds: TargetIdSelection[];
}

/**
* 目标选择，支持正选反选
*/
export interface TargetIdSelection {
  /**
  * 目标组ID
  */
  targetGroupId: string;
  /**
  * 目标ID数组，为空表示全部
  */
  targetIds: string[];
  /**
  * 是否反选，默认false，即正选
  */
  isInvert: boolean;
}

export interface ItemTmplBulkApplyRequestDTO {
  /**
  * 指标模板ID
  */
  itemTmplIds: string[];
  /**
  * 选择目标，支持正选反选
  */
  targetIds: TargetIdSelection[];
  /**
  * 指标选项枚举
  */
  options: number[];
}

export interface ItemTmplBulkAddRequestDTO {
  /**
  * 被添加指标模板ID
  */
  itemTmplId: string;
  /**
  * 选择目标，支持正选反选
  */
  targetIds: TargetIdSelection[];
}

export interface ItemTmplApplyToTargetRequestDTO {
  /**
  * 指标模板ID
  */
  itemTmplIds: string[];
  /**
  * 选择目标，支持正选反选
  */
  targetIds: TargetIdSelection[];
  /**
  * 调用checkTargetOption接口，如果某些目标在某一指标类型下有多个目标选项的时候，需要设置这个参数
  */
  targetOptions: TargetOption[];
}

export interface ItemTypeIdTargetOption {
  /**
  * 指标类型ID
  */
  itemTypeId: string;
  /**
  * 指标选项ID
  */
  targetOptionIds: string[];
}

/**
* 调用checkTargetOption接口，如果某些目标在某一指标类型下有多个目标选项的时候，需要设置这个参数
*/
export interface TargetOption {
  /**
  * 目标ID
  */
  targetId: string;
  targetOptions: ItemTypeIdTargetOption[];
}

export interface ItemGroupRequestDTO {
  /**
  * 指标组名称
  */
  name: string;
  /**
  * 指标组父级ID
  */
  pid: string;
  /**
  * 指标组类型ID
  */
  itemGroupTypeId: string;
}

export interface ItemGroupDTO {
  /**
  * 表ID
  */
  id: string;
  /**
  * 指标组名称
  */
  name: string;
  /**
  * 父级指标组名称
  */
  pid: string;
  /**
  * 该指标分组下的指标数量
  */
  itemNum: number;
  /**
  * 指标组类型ID
  */
  itemGroupTypeId: string;
  children: ItemGroupDTO[];
}

export interface ResultVOItemGroupDTO {
  code: number;
  msg: string;
  data: ItemGroupDTO;
}

export interface ItemGroupUpdateRequestDTO {
  /**
  * 指标组ID
  */
  id: string;
  /**
  * 指标组名称
  */
  name: string;
}

export interface ResultVOListTargetCategoryDTO {
  code: number;
  msg: string;
  data: TargetCategoryDTO[];
}

/**
* 复合选取
*/
export interface Complex {
  /**
  * 启用状态
  */
  enable: boolean;
  /**
  * 存储Series
  */
  series: string;
  /**
  * 启用配置
  */
  configPath: string;
  /**
  * 预处理
  */
  preprocess: string;
  /**
  * 解析模式
  */
  parseMode: ComplexParseModeEnum;
  /**
  * 解析模式-样式/筛选键
  */
  pattern: string;
  /**
  * 存储类型
  */
  storeType: ComplexStoreTypeEnum;
  /**
  * 数据项定义-数据项
  */
  cols: string[];
  /**
  * 数据项定义-合并数据项
  */
  mergeCol: boolean;
  /**
  * 数据项类型转换
  */
  typeConvs: KeyValuePair[];
  /**
  * 数据项标记
  */
  tags: string[];
  dataCompute: Compute;
}

export enum ComplexParseModeEnum {
  AUTO = "AUTO",
  ROW_COL = "ROW_COL",
  ROW = "ROW",
  OBJECT = "OBJECT",
  ARRAY = "ARRAY",
  GROK = "GROK",
  DISSECT = "DISSECT",
  RAW = "RAW",
}
export enum ComplexStoreTypeEnum {
  STORE_TIMEDB = "STORE_TIMEDB",
  STORE_ES = "STORE_ES",
  STORE_RDBMS = "STORE_RDBMS",
  STORE_KAFKA = "STORE_KAFKA",
  STORE_CLICKHOUSE = "STORE_CLICKHOUSE",
  STORE_TDENGINE = "STORE_TDENGINE",
}
export interface Compute {
  /**
  * 基于唯一键、基于行号
  */
  type: ComputeTypeEnum;
  /**
  * 唯一键列名，如果是基于行号，则不需要传
  */
  key: string;
  computes: ComputeItem[];
}

export enum ComputeTypeEnum {
  UNIQUE_KEY = "UNIQUE_KEY",
  ROW_NO = "ROW_NO",
}
export interface ComputeItem {
  /**
  * 计算类型
  */
  type: ComputeItemTypeEnum;
  /**
  * 单位转换
  */
  unit: string;
  /**
  * 列名
  */
  column: string;
  /**
  * 计算表达式
  */
  expression: string;
}

export enum ComputeItemTypeEnum {
  BASE = "BASE",
  EXP = "EXP",
  JEE = "JEE",
}
export interface ItemTmplDetailDTO {
  /**
  * 指标模板表ID，用于更新
  */
  id: string;
  /**
  * 指标名称
  */
  itemName: string;
  /**
  * 存储Series
  */
  series: string;
  /**
  * 指标类型ID
  */
  itemTypeId: string;
  /**
  * 指标模板类型ID（其实就是目标监控指标、分类命令指标、配置信息指标、分类配置选择指标等这些的表ID）
  */
  itemTmplTypeId: string;
  /**
  * 采集频率，单位秒
  */
  collectFreq: number;
  /**
  * 服务名称
  */
  serviceId: string;
  /**
  * 数据存储
  */
  storageId: string;
  /**
  * 执行日历
  */
  execCalendarId: string;
  /**
  * 有效时段
  */
  timeWindowId: string;
  /**
  * 是否启用
  */
  turnOn: boolean;
  /**
  * 连接超时，单位秒
  */
  connTimeout: number;
  /**
  * 执行超时，单位秒
  */
  execTimeout: number;
  /**
  * 重试次数，单位次
  */
  retryLimit: number;
  /**
  * 重试延迟，单位秒
  */
  retryDelay: number;
  /**
  * 启用配置
  */
  configPath: string;
  /**
  * 自动确认
  */
  autoIgnore: boolean;
  /**
  * 短连接
  */
  shortConn: boolean;
  /**
  * 忽略退出状态
  */
  ignoreExitStatus: boolean;
  /**
  * 忽略错误输出
  */
  ignoreStderr: boolean;
  /**
  * 生效开始时间
  */
  startTime: string;
  /**
  * 生效结束时间
  */
  endTime: string;
  /**
  * 采集命令
  */
  collectCmd: string;
  /**
  * 预处理
  */
  preprocess: string;
  /**
  * 解析模式
  */
  parseMode: ItemTmplDetailDTOParseModeEnum;
  testConfig: TestConfig;
  /**
  * 合并数据项
  */
  mergeCol: boolean;
  /**
  * 数据项
  */
  cols: string[];
  /**
  * 数据项类型转换
  */
  typeConvs: KeyValuePair[];
  /**
  * 数据项标记
  */
  tags: string[];
  compute: Compute;
  /**
  * 告警规则
  */
  thresholds: Threshold[];
  /**
  * 指标分类ID
  */
  itemCategoryId: string;
  /**
  * 命令类型
  */
  cmdType: ItemTmplDetailDTOCmdTypeEnum;
  /**
  * 启用MIB
  */
  useMib: boolean;
  /**
  * 指标分组表ID
  */
  itemGroupId: string;
  /**
  * 被动推送
  */
  passive: boolean;
  /**
  * 解析模式-样式
  */
  pattern: string;
  /**
  * 存储类型
  */
  storeType: ItemTmplDetailDTOStoreTypeEnum;
}

export enum ItemTmplDetailDTOParseModeEnum {
  AUTO = "AUTO",
  ROW_COL = "ROW_COL",
  ROW = "ROW",
  OBJECT = "OBJECT",
  ARRAY = "ARRAY",
  GROK = "GROK",
  DISSECT = "DISSECT",
  RAW = "RAW",
}
export enum ItemTmplDetailDTOCmdTypeEnum {
  MONITOR_CMD = "MONITOR_CMD",
  SHELL = "SHELL",
  POWERSHELL = "POWERSHELL",
  LOG = "LOG",
  EXE = "EXE",
  PYTHON = "PYTHON",
  LUA = "LUA",
  TENGO = "TENGO",
  GUI = "GUI",
}
export enum ItemTmplDetailDTOStoreTypeEnum {
  STORE_TIMEDB = "STORE_TIMEDB",
  STORE_ES = "STORE_ES",
  STORE_RDBMS = "STORE_RDBMS",
  STORE_KAFKA = "STORE_KAFKA",
  STORE_CLICKHOUSE = "STORE_CLICKHOUSE",
  STORE_TDENGINE = "STORE_TDENGINE",
}
/**
* 数据项类型转换
*/
export interface KeyValuePair {
  /**
  * 键
  */
  key: string;
  /**
  * 值
  */
  value: string;
}

export interface NoticeExt {
  /**
  * 通知类型，通知配置表ID
  */
  noticeId: string;
  /**
  * 参数
  */
  params: string[];
}

export interface ResultVOItemTmplDetailDTO {
  code: number;
  msg: string;
  data: ItemTmplDetailDTO;
}

/**
* 测试配置
*/
export interface TestConfig {
  /**
  * 地址
  */
  host: string;
  /**
  * 端口
  */
  port: number;
  /**
  * 数据库名/中间件名称
  */
  database: number;
  /**
  * 用户名
  */
  username: number;
  /**
  * 密码
  */
  password: number;
  /**
  * 连接参数
  */
  connOptions: KeyValuePair[];
}

/**
* 触发条件
*/
export interface ThresValue {
  /**
  * 列名
  */
  key: string;
  /**
  * 计算操作符，<，>，!=等等
  */
  condition: string;
  /**
  * 计算操作符右边的值
  */
  value: string;
  /**
  * 条件类型
  */
  type: ThresValueTypeEnum;
}

export enum ThresValueTypeEnum {
  ARRAY = "ARRAY",
  JEE = "JEE",
  COLSET = "COLSET",
}
/**
* 告警规则
*/
export interface Threshold {
  /**
  * 告警级别
  */
  level: ThresholdLevelEnum;
  /**
  * 告警标题
  */
  alertTitle: string;
  /**
  * 执行日历
  */
  execCalendarId: string;
  /**
  * 有效时段
  */
  timeWindowId: string;
  /**
  * 选项-显示列数据项名
  */
  kvMode: boolean;
  /**
  * 通知方式，需要传微信、邮件、短信等的通知配置表ID
  */
  noticeIds: string[];
  /**
  * 配置告警规则-选择模式
  */
  alertRuleMode: ThresholdAlertRuleModeEnum;
  /**
  * 触发条件
  */
  thresVals: ThresValue[];
  /**
  * 告警内容
  */
  alertContent: string;
  complex: Complex;
  /**
  * 恢复通知
  */
  recoveryNotice: boolean;
  /**
  * 恢复延迟，单位秒
  */
  recoveryDelay: number;
  /**
  * 通知次数
  */
  noticeCycleTimes: number;
  /**
  * 通知速率
  */
  noticeRate: number;
  /**
  * 通知周期，单位分钟
  */
  noticeCycle: number;
  /**
  * 忽略次数
  */
  ignoreTimes: number;
  /**
  * 过期周期，单位分钟
  */
  expireCycle: number;
  /**
  * 升级次数
  */
  upgradeLimit: number;
  /**
  * 自愈指令-设置（自愈指标模板ID）
  */
  cmdItemTplId: string;
  /**
  * 自愈指令-通知
  */
  triggerCmdNotice: boolean;
  /**
  * 通知升级
  */
  upgradeNotices: UpgradeNotice[];
  noticeExt: NoticeExt[];
}

export enum ThresholdLevelEnum {
  INFO = "INFO",
  WARN = "WARN",
  ERROR = "ERROR",
  CRITICAL = "CRITICAL",
  FATAL = "FATAL",
}
export enum ThresholdAlertRuleModeEnum {
  UNIVERSE_MODE = "UNIVERSE_MODE",
  ARRAY_MODE = "ARRAY_MODE",
}
/**
* 通知升级
*/
export interface UpgradeNotice {
  /**
  * 告警级别
  */
  alertLevel: UpgradeNoticeAlertLevelEnum;
  /**
  * 通知配置表ID
  */
  noticeIds: string[];
}

export enum UpgradeNoticeAlertLevelEnum {
  INFO = "INFO",
  WARN = "WARN",
  ERROR = "ERROR",
  CRITICAL = "CRITICAL",
  FATAL = "FATAL",
}
export interface ItemTmplPanelDTO {
  /**
  * 指标模板表ID
  */
  itemTmplIds: string[];
  /**
  * 看板
  */
  panels: PanelDTO[];
}

/**
* 看板
*/
export interface PanelDTO {
  /**
  * 面板名称
  */
  name: string;
  /**
  * 面板ID
  */
  id: string;
  /**
  * 面板参数
  */
  params: KeyValuePair[];
}

export interface ResultVOItemTmplPanelDTO {
  code: number;
  msg: string;
  data: ItemTmplPanelDTO;
}

export interface ItemGroupTypeDTO {
  /**
  * 表ID
  */
  id: string;
  /**
  * 指标分组类型名称
  */
  name: string;
}

export interface ResultVOListItemGroupTypeDTO {
  code: number;
  msg: string;
  data: ItemGroupTypeDTO[];
}

export interface ResultVOListItemGroupDTO {
  code: number;
  msg: string;
  data: ItemGroupDTO[];
}

