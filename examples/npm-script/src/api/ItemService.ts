/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module Item模块接口
*/
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import BizService from "./BizService";
import type {
  ItemTmplTargetPageRequestDTO,
  ItemTmplPageRequestDTO,
  ItemTmplBulkReplaceRequestDTO,
  ItemTmplBulkApplyRequestDTO,
  ItemTmplBulkAddRequestDTO,
  ItemTmplApplyToTargetRequestDTO,
  ItemGroupRequestDTO,
  ItemGroupUpdateRequestDTO,
  ResultVOPageResultDTOTargetDTO,
  ResultVOPageResultDTORelatedTargetDTO,
  ResultVOPageResultDTOItemTmplDTO,
  ResultVOString,
  ResultVOItemGroupDTO,
  ResultVOItemTmplDetailDTO,
  ResultVOItemTmplPanelDTO,
  ResultVOListItemGroupTypeDTO,
  ResultVOListItemGroupDTO,
} from "./types"

export class ItemService extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
  * POST /item/tmpl/target/page
  *
  * 指标管理-批量添加/添加并更新/删除弹窗目标分页查询接口
  * @param payload 
  * @returns Promise<ResultVOPageResultDTOTargetDTO> OK
  */
  postItemTmplTargetPage(
    payload: ItemTmplTargetPageRequestDTO,
  ): Promise<ResultVOPageResultDTOTargetDTO> {
      return this.getAxios().post(`/item/tmpl/target/page`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/related-target/page
  *
  * 指标管理-指标模板关联目标分页查询接口
  * @param payload 
  * @returns Promise<ResultVOPageResultDTORelatedTargetDTO> OK
  */
  postItemTmplRelatedTargetPage(
    payload: ItemTmplTargetPageRequestDTO,
  ): Promise<ResultVOPageResultDTORelatedTargetDTO> {
      return this.getAxios().post(`/item/tmpl/related-target/page`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/page
  *
  * 指标管理-指标模板分页查询接口
  * @param payload 
  * @returns Promise<ResultVOPageResultDTOItemTmplDTO> OK
  */
  postItemTmplPage(
    payload: ItemTmplPageRequestDTO,
  ): Promise<ResultVOPageResultDTOItemTmplDTO> {
      return this.getAxios().post(`/item/tmpl/page`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/bulk-replace
  *
  * 指标管理-替换目标/替换所有接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplBulkReplace(
    payload: ItemTmplBulkReplaceRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/bulk-replace`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/bulk-apply
  *
  * 指标管理-更新目标/更新所有接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplBulkApply(
    payload: ItemTmplBulkApplyRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/bulk-apply`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/batch-delete
  *
  * 指标管理-批量删除接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplBatchDelete(
    payload: ItemTmplBulkAddRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/batch-delete`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/batch-add
  *
  * 指标管理-批量添加接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplBatchAdd(
    payload: ItemTmplBulkAddRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/batch-add`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/batch-add-update
  *
  * 指标管理-批量添加并更新接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplBatchAddUpdate(
    payload: ItemTmplBulkAddRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/batch-add-update`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/tmpl/apply-to-target
  *
  * 指标管理-添加到目标接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemTmplApplyToTarget(
    payload: ItemTmplApplyToTargetRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/tmpl/apply-to-target`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/group
  *
  * 指标管理-新建分组接口
  * @param payload 
  * @returns Promise<ResultVOItemGroupDTO> OK
  */
  postItemGroup(
    payload: ItemGroupRequestDTO,
  ): Promise<ResultVOItemGroupDTO> {
      return this.getAxios().post(`/item/group`,
          payload,
          {
          }
        )
  }

  /**
  * POST /item/group/update
  *
  * 指标管理-编辑节点接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postItemGroupUpdate(
    payload: ItemGroupUpdateRequestDTO,
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/item/group/update`,
          payload,
          {
          }
        )
  }

  /**
  * GET /item/tmpl
  *
  * 指标管理-指标详情接口
  * @param id 指标模板ID
  * @returns Promise<ResultVOItemTmplDetailDTO> OK
  */
  getItemTmpl(
    params: {
      id: string,
    },
  ): Promise<ResultVOItemTmplDetailDTO> {
      return this.getAxios().get(`/item/tmpl`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * GET /item/tmpl/panel
  *
  * 指标管理-看板配置查询接口
  * @param id 指标模板ID
  * @returns Promise<ResultVOItemTmplPanelDTO> OK
  */
  getItemTmplPanel(
    params: {
      id: string,
    },
  ): Promise<ResultVOItemTmplPanelDTO> {
      return this.getAxios().get(`/item/tmpl/panel`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

  /**
  * GET /item/tmpl/move
  *
  * 指标管理-移动指标接口
  * @param ids[] 指标模板ID，可以传多个
  * @param id 指标组ID
  * @returns Promise<ResultVOString> OK
  */
  getItemTmplMove(
    params: {
      ids[]: string[],
      id: string,
    },
  ): Promise<ResultVOString> {
      return this.getAxios().get(`/item/tmpl/move`,
          {
            params: {
              ids[]: params.ids[],
              id: params.id,
            },
          }
        )
  }

  /**
  * GET /item/tmpl/copy
  *
  * 指标管理-复制指标接口
  * @param ids[] 指标模板ID，可以传多个
  * @param id 指标组ID
  * @returns Promise<ResultVOString> OK
  */
  getItemTmplCopy(
    params: {
      ids[]: string[],
      id: string,
    },
  ): Promise<ResultVOString> {
      return this.getAxios().get(`/item/tmpl/copy`,
          {
            params: {
              ids[]: params.ids[],
              id: params.id,
            },
          }
        )
  }

  /**
  * GET /item/tmpl/bulk-delete
  *
  * 指标管理-删除指标接口（单纯只删除数据库里的item_tmpl表里的记录）
  * @param ids[] 指标模板ID，可以传多个
  * @returns Promise<ResultVOString> OK
  */
  getItemTmplBulkDelete(
    params: {
      ids[]: string[],
    },
  ): Promise<ResultVOString> {
      return this.getAxios().get(`/item/tmpl/bulk-delete`,
          {
            params: {
              ids[]: params.ids[],
            },
          }
        )
  }

  /**
  * GET /item/tmpl/bulk-delete-applied
  *
  * 指标管理-删除所有接口
  * @param ids[] 指标模板ID，可以传多个
  * @param targetIds[] 目标ID，可以传多个，如果没有传表示删除所有
  * @returns Promise<ResultVOString> OK
  */
  getItemTmplBulkDeleteApplied(
    params: {
      ids[]: string[],
      targetIds[]?: string[],
    },
  ): Promise<ResultVOString> {
      return this.getAxios().get(`/item/tmpl/bulk-delete-applied`,
          {
            params: {
              ids[]: params.ids[],
              targetIds[]: params.targetIds[],
            },
          }
        )
  }

  /**
  * GET /item/group/type/list
  *
  * 指标管理-指标分组类型下拉框选项查询接口
  * @returns Promise<ResultVOListItemGroupTypeDTO> OK
  */
  getItemGroupTypeList(
  ): Promise<ResultVOListItemGroupTypeDTO> {
      return this.getAxios().get(`/item/group/type/list`,
          {
          }
        )
  }

  /**
  * GET /item/group/tree
  *
  * 指标管理-指标分组目录树查询接口
  * @param keyword 搜索关键词
  * @param itemGroupTypeId 指标分组类型ID
  * @returns Promise<ResultVOListItemGroupDTO> OK
  */
  getItemGroupTree(
    params: {
      keyword?: string,
      itemGroupTypeId?: string,
    },
  ): Promise<ResultVOListItemGroupDTO> {
      return this.getAxios().get(`/item/group/tree`,
          {
            params: {
              keyword: params.keyword,
              itemGroupTypeId: params.itemGroupTypeId,
            },
          }
        )
  }

  /**
  * GET /item/group/delete
  *
  * 指标管理-删除目录接口
  * @param ids[] 指标组ID，可以传多个
  * @returns Promise<ResultVOString> OK
  */
  getItemGroupDelete(
    params: {
      ids[]: string[],
    },
  ): Promise<ResultVOString> {
      return this.getAxios().get(`/item/group/delete`,
          {
            params: {
              ids[]: params.ids[],
            },
          }
        )
  }

}

export default ItemService;
  
export function createItemService(opt?: Partial<CreateAxiosOptions>) {
  return new ItemService(opt);
}

export const itemService = createItemService();

