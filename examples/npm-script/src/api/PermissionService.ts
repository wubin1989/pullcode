/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module Permission-controller
*/
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import BizService from "./BizService";
import type {
  PermissionModel,
  Response,
} from "./types"

export class PermissionService extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
  * POST /permission/update
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postPermissionUpdate(
    payload: PermissionModel,
  ): Promise<Response> {
      return this.getAxios().post(`/permission/update`,
          payload,
          {
          }
        )
  }

  /**
  * POST /permission/delete
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postPermissionDelete(
    payload: string[],
  ): Promise<Response> {
      return this.getAxios().post(`/permission/delete`,
          payload,
          {
          }
        )
  }

  /**
  * POST /permission/add
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postPermissionAdd(
    payload: PermissionModel,
  ): Promise<Response> {
      return this.getAxios().post(`/permission/add`,
          payload,
          {
          }
        )
  }

  /**
  * GET /permission/list/get
  *
  * @param pageSize 
  * @param pageNum 
  * @param name 
  * @returns Promise<Response> OK
  */
  getPermissionListGet(
    params: {
      pageSize?: number,
      pageNum?: number,
      name?: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/permission/list/get`,
          {
            params: {
              pageSize: params.pageSize,
              pageNum: params.pageNum,
              name: params.name,
            },
          }
        )
  }

  /**
  * GET /permission/get
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  getPermissionGet(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/permission/get`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

}

export default PermissionService;
  
export function createPermissionService(opt?: Partial<CreateAxiosOptions>) {
  return new PermissionService(opt);
}

export const permissionService = createPermissionService();

