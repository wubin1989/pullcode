/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module Target模块接口
*/
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import BizService from "./BizService";
import type {
  TargetPageRequestDTO,
  TargetCategoryDTO,
  ResultVOPageResultDTOTargetDTO,
  ResultVOTargetCategoryDTO,
  ResultVOString,
  ResultVOListTargetCategoryDTO,
} from "./types"

export class TargetService extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
  * POST /target/page
  *
  * 目标管理-目标分页查询接口
  * @param payload 
  * @returns Promise<ResultVOPageResultDTOTargetDTO> OK
  */
  postTargetPage(
    payload: TargetPageRequestDTO,
  ): Promise<ResultVOPageResultDTOTargetDTO> {
      return this.getAxios().post(`/target/page`,
          payload,
          {
          }
        )
  }

  /**
  * POST /target/category
  *
  * 目标管理-创建目标分类接口
  * @param payload 
  * @returns Promise<ResultVOTargetCategoryDTO> OK
  */
  postTargetCategory(
    payload: TargetCategoryDTO,
  ): Promise<ResultVOTargetCategoryDTO> {
      return this.getAxios().post(`/target/category`,
          payload,
          {
          }
        )
  }

  /**
  * POST /target/category/remove
  *
  * 目标管理-目标分类删除接口
  * @param payload 
  * @returns Promise<ResultVOString> OK
  */
  postTargetCategoryRemove(
    payload: number[],
  ): Promise<ResultVOString> {
      return this.getAxios().post(`/target/category/remove`,
          payload,
          {
          }
        )
  }

  /**
  * GET /target/category/tree
  *
  * 目标管理-目标分类目录树查询接口
  * @param keyword 搜索关键词
  * @param pid 父级目标分类ID
  * @returns Promise<ResultVOListTargetCategoryDTO> OK
  */
  getTargetCategoryTree(
    params: {
      keyword?: string,
      pid?: string,
    },
  ): Promise<ResultVOListTargetCategoryDTO> {
      return this.getAxios().get(`/target/category/tree`,
          {
            params: {
              keyword: params.keyword,
              pid: params.pid,
            },
          }
        )
  }

}

export default TargetService;
  
export function createTargetService(opt?: Partial<CreateAxiosOptions>) {
  return new TargetService(opt);
}

export const targetService = createTargetService();

