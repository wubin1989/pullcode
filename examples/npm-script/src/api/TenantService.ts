/**
* Generated by pullcode v1.1.8.
* Don't edit!
*
* @module Tenant-controller
*/
import { CreateAxiosOptions } from "@/httputil/axiosTransform";
import BizService from "./BizService";
import type {
  TenantModel,
  Response,
} from "./types"

export class TenantService extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }

  /**
  * POST /tenant/update
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postTenantUpdate(
    payload: TenantModel,
  ): Promise<Response> {
      return this.getAxios().post(`/tenant/update`,
          payload,
          {
          }
        )
  }

  /**
  * POST /tenant/migrate
  *
  * @param tenantId 
  * @param userId 
  * @returns Promise<Response> OK
  */
  postTenantMigrate(
    params: {
      tenantId: string,
      userId: string,
    },
  ): Promise<Response> {
      return this.getAxios().post(`/tenant/migrate`,
          null,
          {
            params: {
              tenantId: params.tenantId,
              userId: params.userId,
            },
          }
        )
  }

  /**
  * POST /tenant/delete
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postTenantDelete(
    payload: string,
  ): Promise<Response> {
      return this.getAxios().post(`/tenant/delete`,
          payload,
          {
          }
        )
  }

  /**
  * POST /tenant/add
  *
  * @param payload 
  * @returns Promise<Response> OK
  */
  postTenantAdd(
    payload: TenantModel,
  ): Promise<Response> {
      return this.getAxios().post(`/tenant/add`,
          payload,
          {
          }
        )
  }

  /**
  * GET /tenant/list/get
  *
  * @param pageSize 
  * @param pageNum 
  * @param name 
  * @returns Promise<Response> OK
  */
  getTenantListGet(
    params: {
      pageSize?: number,
      pageNum?: number,
      name?: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/tenant/list/get`,
          {
            params: {
              pageSize: params.pageSize,
              pageNum: params.pageNum,
              name: params.name,
            },
          }
        )
  }

  /**
  * GET /tenant/get
  *
  * @param id 
  * @returns Promise<Response> OK
  */
  getTenantGet(
    params: {
      id: string,
    },
  ): Promise<Response> {
      return this.getAxios().get(`/tenant/get`,
          {
            params: {
              id: params.id,
            },
          }
        )
  }

}

export default TenantService;
  
export function createTenantService(opt?: Partial<CreateAxiosOptions>) {
  return new TenantService(opt);
}

export const tenantService = createTenantService();

