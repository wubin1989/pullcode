/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
* Generated by pullcode <%- version %>.
* Don't edit!
*
* @module <%- module %>
*/
import qs from "qs";
import { CreateAxiosOptions } from "pullcode/src/httputil/axiosTransform";
import BizService from "./BizService";
<%_ if(types && types.length){ -%>
import type {
<%_ types.forEach(function(type){ -%>
  <%- type %>,
<%_ }) -%>
} from "./types";
<%_ } -%>

export class <%- name %> extends BizService {

  constructor(options?: Partial<CreateAxiosOptions>) {
    super(options);
  }
<%_ routes.forEach(function(route){ -%>

  /**
  * <%- _.toUpper(route.httpMethod) %> <%- route.endpoint %>
  *
  <%_ if(route.docs && route.docs.length){ -%>
    <%_ route.docs.forEach(function(doc){ -%>
  * <%- doc %>
  <%_ }) -%>
  <%_ } -%>
  <%_ if(route.reqBody){ -%>
  * @param <%- route.reqBody.name %> <%- route.reqBody.doc %>
  <%_ } -%>
  <%_ if(route.allParams && route.allParams.length){ -%>
    <%_ route.allParams.forEach(function(param){ -%>
  * @param <%- param.name %> <%- param.doc %>
    <%_ }) -%>
  <%_ } -%>
  * @returns Promise<<%- route.respData.type==="Blob" ? 'any' : route.respData.type %>> <%- route.respData.doc %>
  */
  <%- route.name %>(
  <%_ if(route.reqBody){ -%>
    <%- route.reqBody.name %>: <%- route.reqBody.type %>,
  <%_ } -%>
  <%_ if(route.allParams && route.allParams.length){ -%>
    params: {
    <%_ route.allParams.forEach(function(param){ -%>
      <%- param.name %><%_ if(!param.required){ -%>?<%_ } -%>: <%- param.type %>;
    <%_ }) -%>
    },
  <%_ } -%>
  ): Promise<<%- route.respData.type === "Blob" ? 'any' : route.respData.type %>> {
    <%_ if(route.hasHeaders){ -%>
      const headers: Record<string, string> = {
        <%_ if(route.defaultHeaders){ -%>
          <%_ for(let prop in route.defaultHeaders){ -%>
        '<%- prop %>': '<%- route.defaultHeaders[prop] %>',
          <%_ } -%>
        <%_ } -%>
        <%_ if(route.headerParams && route.headerParams.length){ -%>
          <%_ route.headerParams.forEach(function(headerParam){ -%>
            <%_ if(headerParam.required){ -%>
        '<%- headerParam.name %>': '' + params.<%- headerParam.name %>,
            <%_ } -%>
          <%_ }) -%>
        <%_ } -%>
      }
      <%_ if(route.headerParams && route.headerParams.length){ -%>
        <%_ route.headerParams.forEach(function(headerParam){ -%>
          <%_ if(!headerParam.required){ -%>
      if (params.<%- headerParam.name %> !== undefined) {
        headers['<%- headerParam.name %>'] = '' + params.<%- headerParam.name %>
      }
          <%_ } -%>
        <%_ }) -%>
      <%_ } -%>
    <%_ } -%>
      return this.getAxios().<%- _.toLower(route.httpMethod) %>(`<%- route.endpoint %>`,
        <%_ if(route.reqBody){ -%>
          <%_ if(route.contentType == 'application/x-www-form-urlencoded'){ -%>
            qs.stringify(<%- route.reqBody.name %>),
          <%_ } else { -%>
            <%- route.reqBody.name %>,
          <%_ } -%>
        <%_ } else if (_.toLower(route.httpMethod) === "post" || _.toLower(route.httpMethod) == "put"){ -%>
          null,
        <%_ } -%>
          {
            <%_ if(route.queryParams && route.queryParams.length){ -%>
            params: {
            <%_ route.queryParams.forEach(function(queryParam){ -%>
              <%- queryParam.name %>: params.<%- queryParam.name %>,
            <%_ }) -%>
            },
            paramsSerializer: (params) => qs.stringify(params),
            <%_ } -%>
            <%_ if(route.hasHeaders){ -%>
            headers,
            <%_ } -%>
            <%_ if(route.respData.type === "Blob"){ -%>
            responseType: 'blob',
            <%_ } -%>
          }
        )
  }
<%_ }) -%>

}

export default <%- name %>;
  
export function create<%- name %>(opt?: Partial<CreateAxiosOptions>) {
  return new <%- name %>(opt);
}

export const <%- _.lowerFirst(name) %> = create<%- name %>();

